{"ast":null,"code":"var _jsxFileName = \"/home/ankit/ONLINE TURNAMENT/frontend/src/Pages/Turnament/Tournament.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"./Tournament.css\";\nimport TournamentForm from \"../../components/TournamentForm/TournamentForm.jsx\";\nimport GameCard from \"../../components/GameCard/GameCard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Get tournamentName from the location state, if available\n  const initialTournamentName = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.tournamentName) || null;\n\n  // Use state to track the selected tournament\n  const [selectedTournament, setSelectedTournament] = useState(initialTournamentName);\n\n  // Handle tournament selection from the GameCard component\n  const handleSelectTournament = tournamentName => {\n    setSelectedTournament(tournamentName);\n  };\n\n  // Function to render either the form or the GameCard component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tournament\",\n    children: selectedTournament ?\n    /*#__PURE__*/\n    // If a tournament is selected, display the registration form\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: selectedTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TournamentForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // If no tournament is selected, display the GameCard component for selection\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select a Tournament\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GameCard, {\n        onSelectTournament: handleSelectTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Tournament, \"wLnVglnGUImosUlDUeyBciy56eM=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","TournamentForm","GameCard","jsxDEV","_jsxDEV","Fragment","_Fragment","Tournament","_s","_location$state","location","navigate","initialTournamentName","state","tournamentName","selectedTournament","setSelectedTournament","handleSelectTournament","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectTournament","_c","$RefreshReg$"],"sources":["/home/ankit/ONLINE TURNAMENT/frontend/src/Pages/Turnament/Tournament.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"./Tournament.css\";\nimport TournamentForm from \"../../components/TournamentForm/TournamentForm.jsx\";\nimport GameCard from \"../../components/GameCard/GameCard\";\n\nconst Tournament = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Get tournamentName from the location state, if available\n  const initialTournamentName = location.state?.tournamentName || null;\n\n  // Use state to track the selected tournament\n  const [selectedTournament, setSelectedTournament] = useState(\n    initialTournamentName\n  );\n\n  // Handle tournament selection from the GameCard component\n  const handleSelectTournament = (tournamentName) => {\n    setSelectedTournament(tournamentName);\n  };\n\n  // Function to render either the form or the GameCard component\n  return (\n    <div className=\"tournament\">\n      {selectedTournament ? (\n        // If a tournament is selected, display the registration form\n        <>\n          <h1>{selectedTournament}</h1>\n          <TournamentForm />\n        </>\n      ) : (\n        // If no tournament is selected, display the GameCard component for selection\n        <>\n          <h1>Select a Tournament</h1>\n          <GameCard onSelectTournament={handleSelectTournament} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Tournament;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAO,kBAAkB;AACzB,OAAOC,cAAc,MAAM,oDAAoD;AAC/E,OAAOC,QAAQ,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACvB,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMY,qBAAqB,GAAG,EAAAH,eAAA,GAAAC,QAAQ,CAACG,KAAK,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBK,cAAc,KAAI,IAAI;;EAEpE;EACA,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAC1Dc,qBACF,CAAC;;EAED;EACA,MAAMK,sBAAsB,GAAIH,cAAc,IAAK;IACjDE,qBAAqB,CAACF,cAAc,CAAC;EACvC,CAAC;;EAED;EACA,oBACEV,OAAA;IAAKc,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBJ,kBAAkB;IAAA;IACjB;IACAX,OAAA,CAAAE,SAAA;MAAAa,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAKJ;MAAkB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7BnB,OAAA,CAACH,cAAc;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAClB,CAAC;IAAA;IAEH;IACAnB,OAAA,CAAAE,SAAA;MAAAa,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BnB,OAAA,CAACF,QAAQ;QAACsB,kBAAkB,EAAEP;MAAuB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACxD;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CAnCID,UAAU;EAAA,QACGR,WAAW,EACXC,WAAW;AAAA;AAAAyB,EAAA,GAFxBlB,UAAU;AAqChB,eAAeA,UAAU;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}