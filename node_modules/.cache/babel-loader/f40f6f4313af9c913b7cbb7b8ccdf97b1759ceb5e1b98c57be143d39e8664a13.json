{"ast":null,"code":"var _jsxFileName = \"/home/ankit/ONLINE TURNAMENT/frontend/src/Pages/Turnament/Tournament.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Tournament.css\";\nimport TournamentForm from \"../../components/TournamentForm/TournamentForm.jsx\";\nimport GameCard from \"../../components/GameCard/GameCard\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n\n  // Get the tournament name from location if navigated from GameCard, otherwise null\n  const [selectedTournament, setSelectedTournament] = useState(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.tournamentName) || \"\");\n\n  // Handle tournament selection\n  const handleSelectTournament = tournamentName => {\n    setSelectedTournament(tournamentName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tournament\",\n    children: selectedTournament ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: selectedTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TournamentForm, {\n        initialTournament: selectedTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select a Tournament\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GameCard, {\n        onSelectTournament: handleSelectTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Tournament, \"JwbsGaVW0m6s7G3Tf3QDz+KjscA=\", false, function () {\n  return [useLocation];\n});\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useLocation","TournamentForm","GameCard","jsxDEV","_jsxDEV","Fragment","_Fragment","Tournament","_s","_location$state","location","selectedTournament","setSelectedTournament","state","tournamentName","handleSelectTournament","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialTournament","onSelectTournament","_c","$RefreshReg$"],"sources":["/home/ankit/ONLINE TURNAMENT/frontend/src/Pages/Turnament/Tournament.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Tournament.css\";\nimport TournamentForm from \"../../components/TournamentForm/TournamentForm.jsx\";\nimport GameCard from \"../../components/GameCard/GameCard\";\n\nconst Tournament = () => {\n  const location = useLocation();\n\n  // Get the tournament name from location if navigated from GameCard, otherwise null\n  const [selectedTournament, setSelectedTournament] = useState(\n    location.state?.tournamentName || \"\"\n  );\n\n  // Handle tournament selection\n  const handleSelectTournament = (tournamentName) => {\n    setSelectedTournament(tournamentName);\n  };\n\n  return (\n    <div className=\"tournament\">\n      {/* Display GameCard if no tournament is selected, otherwise show the form */}\n      {selectedTournament ? (\n        <>\n          <h1>{selectedTournament}</h1>\n          <TournamentForm initialTournament={selectedTournament} />\n        </>\n      ) : (\n        <>\n          <h1>Select a Tournament</h1>\n          <GameCard onSelectTournament={handleSelectTournament} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Tournament;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,kBAAkB;AACzB,OAAOC,cAAc,MAAM,oDAAoD;AAC/E,OAAOC,QAAQ,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACvB,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAC1D,EAAAU,eAAA,GAAAC,QAAQ,CAACG,KAAK,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBK,cAAc,KAAI,EACpC,CAAC;;EAED;EACA,MAAMC,sBAAsB,GAAID,cAAc,IAAK;IACjDF,qBAAqB,CAACE,cAAc,CAAC;EACvC,CAAC;EAED,oBACEV,OAAA;IAAKY,SAAS,EAAC,YAAY;IAAAC,QAAA,EAExBN,kBAAkB,gBACjBP,OAAA,CAAAE,SAAA;MAAAW,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAKN;MAAkB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7BjB,OAAA,CAACH,cAAc;QAACqB,iBAAiB,EAAEX;MAAmB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACzD,CAAC,gBAEHjB,OAAA,CAAAE,SAAA;MAAAW,QAAA,gBACEb,OAAA;QAAAa,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BjB,OAAA,CAACF,QAAQ;QAACqB,kBAAkB,EAAER;MAAuB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACxD;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACb,EAAA,CA7BID,UAAU;EAAA,QACGP,WAAW;AAAA;AAAAwB,EAAA,GADxBjB,UAAU;AA+BhB,eAAeA,UAAU;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}